{
    "docs": [
        {
            "location": "/overview/android_studio/index.html", 
            "text": "Overview - Android Studio\n\n\nOverview\n\n\nPulse SDK enables any compatible app to utilize Geofencing and iBeacon technology for in-the-moment, micro-location interactions. The interactions are configured using Pulse\u2019s Platform to provide targeted, rich interactions with minimum battery consumption.\n\n\n\n\nCompatibility\n\n\nPulse library works with Android 4.3.1(API 18) to Android N and a device with Bluetooth 4.0 or higher.", 
            "title": "Daniel Studio"
        }, 
        {
            "location": "/overview/android_studio/index.html#overview-android-studio", 
            "text": "Overview  Pulse SDK enables any compatible app to utilize Geofencing and iBeacon technology for in-the-moment, micro-location interactions. The interactions are configured using Pulse\u2019s Platform to provide targeted, rich interactions with minimum battery consumption.   Compatibility  Pulse library works with Android 4.3.1(API 18) to Android N and a device with Bluetooth 4.0 or higher.", 
            "title": "Overview - Android Studio"
        }, 
        {
            "location": "/installation/android_studio/index.html", 
            "text": "Installation - Android Studio\n\n\nFiles\n\n\nPulse Android package contains three files:\n\n\n\n\nandroid-beacon-library-x.x.x.aar \u2013 Pulse utilizes AltBeacon library for beacon monitoring and ranging functions\n\n\npulse-sdk-library.zip \u2013 Pulse library files\n\n\ndemo-app-\n.zip \u2013 Demo app as a reference implementation\n\n\n\n\n\n\nImport Beacon module\n\n\nImport a new module (android-beacon-library-x.x.x.aar) and add this module to the existing project structure. \n\n\n \n\n\n\n\nImport Pulse SDK library module\n\n\nUnzip pulse-sdk-library.zip, import this library project in Android Studio as Eclipse ADT Project and add this module to the existing project structure.\n\n\n \n\n\n\n\nAdd Google Play Services\n\n\nAdd Google Play Services dependency inside build.gradle file in pulse-sdklibrary module :\n\n\ndependencies {\n compile files('libs/PulseSdk.jar')\n compile 'com.google.android.gms:play-services:8.4.0'\n}\n\n\n\n\nNote that Pulse uses Android\u2019s Google Play Services for Geofencing interactions. \n\n\nPulse uses Android\u2019s Google Play Services for Geofencing interactions. See the guide for details: \nhttps://developers.google.com/android/guides/setup\n\n\n\n\nCompile Sdk Version \n Build Tools Version\n\n\nUpdate \u201cCompile Sdk Version\u201d and \u201cBuild Tools Version\u201d for both application and pulse-sdk-library modules\n\n\n \n\n\n \n\n\n\n\nLocation permissions in AndroidManifest.xml\n\n\nAdd location permissions in AndroidManifest.xml file of your project for Geofence operations:\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_COARSE_LOCATION\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_FINE_LOCATION\n /", 
            "title": "Daniel Studio"
        }, 
        {
            "location": "/installation/android_studio/index.html#installation-android-studio", 
            "text": "Files  Pulse Android package contains three files:   android-beacon-library-x.x.x.aar \u2013 Pulse utilizes AltBeacon library for beacon monitoring and ranging functions  pulse-sdk-library.zip \u2013 Pulse library files  demo-app- .zip \u2013 Demo app as a reference implementation    Import Beacon module  Import a new module (android-beacon-library-x.x.x.aar) and add this module to the existing project structure.       Import Pulse SDK library module  Unzip pulse-sdk-library.zip, import this library project in Android Studio as Eclipse ADT Project and add this module to the existing project structure.      Add Google Play Services  Add Google Play Services dependency inside build.gradle file in pulse-sdklibrary module :  dependencies {\n compile files('libs/PulseSdk.jar')\n compile 'com.google.android.gms:play-services:8.4.0'\n}  Note that Pulse uses Android\u2019s Google Play Services for Geofencing interactions.   Pulse uses Android\u2019s Google Play Services for Geofencing interactions. See the guide for details:  https://developers.google.com/android/guides/setup   Compile Sdk Version   Build Tools Version  Update \u201cCompile Sdk Version\u201d and \u201cBuild Tools Version\u201d for both application and pulse-sdk-library modules         Location permissions in AndroidManifest.xml  Add location permissions in AndroidManifest.xml file of your project for Geofence operations:  uses-permission android:name= android.permission.ACCESS_COARSE_LOCATION  /  uses-permission android:name= android.permission.ACCESS_FINE_LOCATION  /", 
            "title": "Installation - Android Studio"
        }, 
        {
            "location": "/integration/android_studio/index.html", 
            "text": "Integration - Android Studio\n\n\nInitialise Pulse library\n\n\nInitialise Pulse library in the main Application class of your project. For e.g.:\n\n\n Private PulseSDK mPulseSDK;\n mPulseSDK = new PulseSDK(this);\n\n\n\n\nPlease refer to the demo app\u2019s DemoAppApplication.java file to review the examples in this document.\n\n\n\n\nInitialise SDK with your app key\n\n\nInitialise the SDK using setConfig method with your app key:\n\n\nmPulseSDK.setConfig(\u201ckey\u201d,\u201cyour-app-key-here\u201d);\n\n\n\n\n\n\nSet the package name\n\n\nIf the package name of Application does not match the package name in AndroidManifest.xml, set the package name to ensure app references can be correctly read by the SDK:\n\n\nmPulseSDK.setPackageName(mPackageName);\n\n\n\n\n\n\nSet the SDK mode\n\n\nPulse runs a service to ensure that interactions can be triggered even when the app is in the background or inactive (not in memory). Based on project requirements, Pulse service can be started in different modes to selectively trigger interactions:\n\n\n\n\nTo interact in all modes (foreground, background and inactive):\n\n\n\n\n   mPulseSDK.startService(true, true, true);\n\n\n\n\n\n\nTo interact in foreground and background mode only:\n\n\n\n\n   mPulseSDK.startService(true, true, false);\n\n\n\n\n\n\nTo interact in foreground only:\n\n\n\n\n   mPulseSDK.startService(true, false, false);\n\n\n\n\n\n\nTo interact in background only:\n\n\n\n\n   mPulseSDK.startService(false, true, false);\n\n\n\n\nBy default, the SDK would use ANDROID_ID and hardware SERIAL number to create a session identifier for the app install:\n\nhttps://developer.android.com/reference/android/provider/Settings.Secure.html#ANDROID_ID\n\n\nhttps://developer.android.com/reference/android/os/Build.html#SERIAL\n\n\nIf you want to use another identifier, use setSessionID method before starting the service:\n\n\n   mPulseSDK.setSessionID(\n4083EE6AF29F4DEDBE5729EB85DD16C8\n);\n   mPulseSDK.startService(true, true, true);\n\n\n\n\nPlease refer to the demo app\u2019s DemoAppApplication.java file to review these Pulse service configurations.\n\n\n\n\nStop and restart the SDK\n\n\nPulse interactions can be \u201cforced\u201d stopped, if required. This feature is used to implement custom user controls within the app to allow user\u2019s to opt-in/out of using Pulse powered features.\nNote that Pulse services operate asynchronously, thus depending on the device it will take a few seconds to shut it down or restart.\n\n\n\n\nTo stop the PulseSDK Service:\n\n\n\n\n   PulseSDK.stopService(mApplication);\n\n\n\n\n\n\nAfter stopping, to restart PulseSDK Service:\n\n\n\n\n   PulseSDK.resetService(mApplication);\n   PulseSDK mPulseSDK = new PulseSDK (mApplication);\n   PulseSDK.startService(true, true, true);\n\n\n\n\n\n\nIn-app interactions within a web view\n\n\nWhen the app is open (active), in-app beacon/geofence interactions are rendered within a web view. This feature is only available when setActivityStatus method is called within the app\u2019s activity lifecycle functions.\n\n\nFor e.g.:\n\n\n   import com.pulse.sdk.global.PulseSDK;\n\n   @Override\n   protected void onResume() {\n     super.onResume();\n     PulseSDK.setActivityStatus(this,false,false);\n   }\n\n   @Override\n   protected void onPause() {\n     PulseSDK.setActivityStatus(this,true,false);\n     super.onPause();\n   }\n\n   @Override\n   protected void onDestroy() {\n     PulseSDK.setActivityStatus(this,false,true);\n     super.onDestroy();\n   }\n\n\n\n\nPlease refer to the demo app\u2019s DemoActivity.java file.\n\n\nAndroid Lollipop and above\n\n\n\n\nNotification icon\n\n\nEnsure the name of notification icon file (PNG) is \u201cic_notification_above_lollipop.png\u201d for target device that has API 21 (Lollipop) and above. This app icon will appear in notifications. Refer to the Android guide for guidance on notification icon design:\n\nhttps://developer.android.com/design/patterns/notifications.html\n\n\n\n\n\n\nPlease refer to the demo app\u2019s res folder for an example. \n\n\n  \n\n\n\n\n\n\nYou may also wish to customize the background color of the notification icon by modifying colors.xml file in pulse-sdk-library project.\n\n\n \n\n\nFor e.g.\n\n\njava\n \n?xml version=\"1.0\" encoding=\"utf-8\"?\n\n \nresources\n\n \ncolor name=\"notification_icon_bg_color_above_lollipop\"\n#ffff4b2f\n/color\n\n \n/resources\n\n\n\n\n\n\nAndroid Marshmallow and above\n\n\n\n\nNew permission standard\n\n\nIf app\u2019s target build is API 23 or higher, then the developer needs to account for new permission standard introduced in Android 6.0:\n\nhttps://developer.android.com/guide/topics/security/permissions.html#normal-dangerous\n\n\n\n\n\n\nPulse SDK requires at least the Location permissions to operate its Geofence and beacon features. Thus, it is recommended that the app ask for the permission when it is opened for the first time.\n\n\n \n\n\n\n\n\n\nAs an example, below is a suggested approach to request the location permission in the launcher activity of the app. Refer to the demo app\u2019s DemoActivity.java file to see this example:\n\n\n\n\n\n\n     //remove Toast messages in production\n     @Override\n     protected void onCreate(Bundle savedInstanceState) {\n       if (Build.VERSION.SDK_INT \n= 23) {\n         PulsePermissions mPulsePermissions = new\n         PulsePermissions (this.getApplicationContext());\n         requestLocationPermission(mPulsePermissions.getPemissionStatusLocation());\n       }\n     }\n\n     private void requestLocationPermission(int mLocation) {\n        if (Build.VERSION.SDK_INT \n= 23) {\n           if ((mLocation != PackageManager.PERMISSION_GRANTED)) {\n             boolean bLocation = ActivityCompat.shouldShowRequestPermissionRationale(this,Manifest.permission.ACCESS_FINE_LOCATION);\n               if (bLocation) {\n                  Toast.makeText(this, \nUser denied Location Permission... Wait until user has changed Permission\n, Toast.LENGTH_LONG).show();\n               }else {\n                  //Show location permission prompt to user\n                  ActivityCompat.requestPermissions((Activity) this,\n                  new String[]{Manifest.permission.ACCESS_FINE_LOCATION},\n                  REQUEST_PERMISSION_LOCATION);\n               }\n           } else {\n              if((mLocation != PackageManager.PERMISSION_GRANTED)) {\n                  boolean bLocation = ActivityCompat.shouldShowRequestPermissionRationale(this,Manifest.permission.ACCESS_FINE_LOCATION);\n                 if (bLocation) {\n                   Toast.makeText(this, \nUser disabled Location Permissions... Wait until user changes Permissions\n, Toast.LENGTH_LONG).show();\n                 }\n              }\n           }\n        }\n     }\n\n\n\n\n\n\nClean the project and build with ProGuard\n\n\nClean the project (Project \n Clean) and then Build(Project \n Build Project). \nPlease refer to both proguard-pulse.txt and project.properties files in Pulse demo app to build with ProGuard.", 
            "title": "Daniel Studio"
        }, 
        {
            "location": "/integration/android_studio/index.html#integration-android-studio", 
            "text": "Initialise Pulse library  Initialise Pulse library in the main Application class of your project. For e.g.:   Private PulseSDK mPulseSDK;\n mPulseSDK = new PulseSDK(this);  Please refer to the demo app\u2019s DemoAppApplication.java file to review the examples in this document.   Initialise SDK with your app key  Initialise the SDK using setConfig method with your app key:  mPulseSDK.setConfig(\u201ckey\u201d,\u201cyour-app-key-here\u201d);   Set the package name  If the package name of Application does not match the package name in AndroidManifest.xml, set the package name to ensure app references can be correctly read by the SDK:  mPulseSDK.setPackageName(mPackageName);   Set the SDK mode  Pulse runs a service to ensure that interactions can be triggered even when the app is in the background or inactive (not in memory). Based on project requirements, Pulse service can be started in different modes to selectively trigger interactions:   To interact in all modes (foreground, background and inactive):      mPulseSDK.startService(true, true, true);   To interact in foreground and background mode only:      mPulseSDK.startService(true, true, false);   To interact in foreground only:      mPulseSDK.startService(true, false, false);   To interact in background only:      mPulseSDK.startService(false, true, false);  By default, the SDK would use ANDROID_ID and hardware SERIAL number to create a session identifier for the app install: https://developer.android.com/reference/android/provider/Settings.Secure.html#ANDROID_ID  https://developer.android.com/reference/android/os/Build.html#SERIAL  If you want to use another identifier, use setSessionID method before starting the service:     mPulseSDK.setSessionID( 4083EE6AF29F4DEDBE5729EB85DD16C8 );\n   mPulseSDK.startService(true, true, true);  Please refer to the demo app\u2019s DemoAppApplication.java file to review these Pulse service configurations.   Stop and restart the SDK  Pulse interactions can be \u201cforced\u201d stopped, if required. This feature is used to implement custom user controls within the app to allow user\u2019s to opt-in/out of using Pulse powered features.\nNote that Pulse services operate asynchronously, thus depending on the device it will take a few seconds to shut it down or restart.   To stop the PulseSDK Service:      PulseSDK.stopService(mApplication);   After stopping, to restart PulseSDK Service:      PulseSDK.resetService(mApplication);\n   PulseSDK mPulseSDK = new PulseSDK (mApplication);\n   PulseSDK.startService(true, true, true);   In-app interactions within a web view  When the app is open (active), in-app beacon/geofence interactions are rendered within a web view. This feature is only available when setActivityStatus method is called within the app\u2019s activity lifecycle functions.  For e.g.:     import com.pulse.sdk.global.PulseSDK;\n\n   @Override\n   protected void onResume() {\n     super.onResume();\n     PulseSDK.setActivityStatus(this,false,false);\n   }\n\n   @Override\n   protected void onPause() {\n     PulseSDK.setActivityStatus(this,true,false);\n     super.onPause();\n   }\n\n   @Override\n   protected void onDestroy() {\n     PulseSDK.setActivityStatus(this,false,true);\n     super.onDestroy();\n   }  Please refer to the demo app\u2019s DemoActivity.java file.", 
            "title": "Integration - Android Studio"
        }, 
        {
            "location": "/integration/android_studio/index.html#android-lollipop-and-above", 
            "text": "Notification icon  Ensure the name of notification icon file (PNG) is \u201cic_notification_above_lollipop.png\u201d for target device that has API 21 (Lollipop) and above. This app icon will appear in notifications. Refer to the Android guide for guidance on notification icon design: https://developer.android.com/design/patterns/notifications.html    Please refer to the demo app\u2019s res folder for an example.         You may also wish to customize the background color of the notification icon by modifying colors.xml file in pulse-sdk-library project.     For e.g.  java\n  ?xml version=\"1.0\" encoding=\"utf-8\"? \n  resources \n  color name=\"notification_icon_bg_color_above_lollipop\" #ffff4b2f /color \n  /resources", 
            "title": "Android Lollipop and above"
        }, 
        {
            "location": "/integration/android_studio/index.html#android-marshmallow-and-above", 
            "text": "New permission standard  If app\u2019s target build is API 23 or higher, then the developer needs to account for new permission standard introduced in Android 6.0: https://developer.android.com/guide/topics/security/permissions.html#normal-dangerous    Pulse SDK requires at least the Location permissions to operate its Geofence and beacon features. Thus, it is recommended that the app ask for the permission when it is opened for the first time.       As an example, below is a suggested approach to request the location permission in the launcher activity of the app. Refer to the demo app\u2019s DemoActivity.java file to see this example:         //remove Toast messages in production\n     @Override\n     protected void onCreate(Bundle savedInstanceState) {\n       if (Build.VERSION.SDK_INT  = 23) {\n         PulsePermissions mPulsePermissions = new\n         PulsePermissions (this.getApplicationContext());\n         requestLocationPermission(mPulsePermissions.getPemissionStatusLocation());\n       }\n     }\n\n     private void requestLocationPermission(int mLocation) {\n        if (Build.VERSION.SDK_INT  = 23) {\n           if ((mLocation != PackageManager.PERMISSION_GRANTED)) {\n             boolean bLocation = ActivityCompat.shouldShowRequestPermissionRationale(this,Manifest.permission.ACCESS_FINE_LOCATION);\n               if (bLocation) {\n                  Toast.makeText(this,  User denied Location Permission... Wait until user has changed Permission , Toast.LENGTH_LONG).show();\n               }else {\n                  //Show location permission prompt to user\n                  ActivityCompat.requestPermissions((Activity) this,\n                  new String[]{Manifest.permission.ACCESS_FINE_LOCATION},\n                  REQUEST_PERMISSION_LOCATION);\n               }\n           } else {\n              if((mLocation != PackageManager.PERMISSION_GRANTED)) {\n                  boolean bLocation = ActivityCompat.shouldShowRequestPermissionRationale(this,Manifest.permission.ACCESS_FINE_LOCATION);\n                 if (bLocation) {\n                   Toast.makeText(this,  User disabled Location Permissions... Wait until user changes Permissions , Toast.LENGTH_LONG).show();\n                 }\n              }\n           }\n        }\n     }   Clean the project and build with ProGuard  Clean the project (Project   Clean) and then Build(Project   Build Project). \nPlease refer to both proguard-pulse.txt and project.properties files in Pulse demo app to build with ProGuard.", 
            "title": "Android Marshmallow and above"
        }, 
        {
            "location": "/advanced_integration/android_studio/index.html", 
            "text": "Advanced Integration - Android Studio\n\n\nDeep linking\n\n\nPulse provides \u201cdeep linking\u201d capability for the app to perform custom processing. The deep linked content is passed to the app when the user clicks on the notification or as a \u201csilent\u201d payload, where no notification is shown.\n\n\nPlease refer to the demo app to see the example of using deep linking inside the app\n\n\n\n\nTo use Pulse\u2019s deep link feature, add a class - PulseDeepLinkReceiver to the app and then instantiate this class from app\u2019s application class:\n\n\n\n\n    PulseDeepLinkReceiver mPulseDeepLinkReceiver = new PulseDeepLinkReceiver (this);\n\n\n\n\n\n\nThen use intent.getStringExtra method inside the class to get deep linked content:\n\n\n\n\n    LocalBroadcastManager.getInstance(mApplicationContext).registerReceiver(mSilentDeepLinkReceiver,new IntentFilter(PulseConstants.PULSE_DEEP_LINK_RECEIVER));\n\n    private BroadcastReceiver mSilentDeepLinkReceiver = new BroadcastReceiver() {\n        @Override\n        public void onReceive(Context context, Intent intent) {\n            setPulseKey(intent.getStringExtra(\nkey\n));\n            Toast.makeText(mApplication, \ndeeplink =\n+intent.getStringExtra(PulseConstants.PULSE_DEEP_LINK_CONTENT),Toast.LENGTH_LONG).show();\n        }\n    };\u2028\n\n\n\n\n\n\nApp Uri\n\n\nPulse also provides \u201cApp Uri\u201d capability for email address, telephone and http URL payload. These can pass specific information directly to an activity when App is in the foreground.\n\n\nPlease refer to the demo app to see the example of receiving the information.\n\n\n\n\nTo use Pulse\u2019s \u201cApp Uri\u201d feature whilst app is in foreground, add a local BroadcastReceiver to the activities you want to be notified in and then use intent.getStringExtra method to get the content: \n\n\n\n\n// email\nLocalBroadcastManager.getInstance(this.getApplicationContext()).registerReceiver(mAppUriEmailReceiver,new ntentFilter(PulseConstants.PULSE_APP_URI_EMAIL_RECEIVER));\n\nprivate BroadcastReceiver mAppUriEmailReceiver = new BroadcastReceiver() {\n  @Override\n  public void onReceive(Context context, Intent intent) {\n    setPulseKey(intent.getStringExtra(\nkey\n));\n    Toast.makeText(getApplicationContext(), \ncontent = \n+intent.getStringExtra(PulseConstants.PULSE_APP_URI_EMAIL_CONTENT),Toast.LENGTH_LONG).show();\n  }\n};\n\n// http\nLocalBroadcastManager.getInstance(this.getApplicationContext()).registerReceiver(mAppUriHttpReceiver,new IntentFilter(PulseConstants.PULSE_APP_URI_HTTP_RECEIVER));\n\nprivate BroadcastReceiver mAppUriHttpReceiver = new BroadcastReceiver() {\n  @Override\n  public void onReceive(Context context, Intent intent) {\n    setPulseKey(intent.getStringExtra(\nkey\n));\n    Toast.makeText(getApplicationContext(), \ncontent = \n+intent.getStringExtra(PulseConstants.PULSE_APP_URI_HTTP_CONTENT),Toast.LENGTH_LONG).show();\n  }\n};\n\n// telephone\nLocalBroadcastManager.getInstance(this.getApplicationContext()).registerReceiver(mAppUriTelReceiver,new IntentFilter(PulseConstants.PULSE_APP_URI_TEL_RECEIVER));\n\nprivate BroadcastReceiver mAppUriTelReceiver = new BroadcastReceiver() {\n  @Override\n  public void onReceive(Context context, Intent intent) {\n    setPulseKey(intent.getStringExtra(\nkey\n));\n    Toast.makeText(getApplicationContext(), \ncontent = \n+intent.getStringExtra(PulseConstants.PULSE_APP_URI_TEL_CONTENT),Toast.LENGTH_LONG).show();\n  }\n};\n\nprotected void setPulseKey(String key) {\n  mApplication.getPulseSDKInstance().setPulseAppUrlKey(key);\n}\n\n\n\n\n\n\nSegments\n\n\nSpecific group of users can be targeted based on Segments. Use setSegments method to pass the Segment data from app for targeted engagement:\n\n\n\n\nYou can set up to 10 segments using setSegments method:\n\n\n\n\n  ArrayList\nString\n segmentList = new ArrayList\nString\n();\n  segmentList.add(0, \ngender=female\n);\n  segmentList.add(1, \nage=35\n);\n  segmentList.add(2, \njob=engineer\n);\n  mPulseSDK.setSegments(segmentList);\n\n\n\n\n\n\nUse clearSegments to remove previously set segments:\n\n\n\n\n  mPulseSDK.clearSegments();\n\n\n\n\n\n\nPrecise and lastknown location\n\n\nPulse provides two methods for the app to get device location in the foreground (a) High precision location and (b) Last known location\nPlease refer to the demo app code to see the complete example.\n\n\nRequest the high prcision location\n\n\nUse getHighPrecisionLocation() method to request the high precision location\n\n\n   mApplication.getPulseSDKInstance().getHighPrecisionLocation(context);\n\n\n\n\nwhere, context = this.getApplicationContext()\n\n\n\n\nReceive the high prcision location\n\n\nA BroadcastReceiver can then be used to receive the information asynchronously. \n\n\n\n\nAdd the following BroadcastReceiver to AndroidManifest.xml file\n\n\n\n\nreceiver\nandroid:name=\ncom.pulse.sdk.broadcast.receiver.PulsePrecisionLocationReceiver\n\nandroid:enabled=\ntrue\n\nandroid:exported=\nfalse\n\n  \nintent-filter\n\n  \naction\n  android:name=\ncom.pulse.sdk.broadcast.high.precision.location.CUSTOM_INTENT\n\n  \n/action\n\n  \n/intent-filter\n\n\n/receiver\n\n\n\n\n\n\n\n\n\nThen add \u201ccom.pulse.sdk.broadcast.receiver\u201d package in the application project\n\n\n\n\n\n\nInside the package, create \u201cPulsePrecisionLocationReceiver\u201d class\n\n\n\n\n\n\nOnce setup, they should appear as following directory structure:\n     \n \n\n\n\n\n\n\nPlease refer to the demo app\u2019s PulsePrecisionLocationReceiver.java file to get the location information:\n\n\n\n\n\n\npublic class PulsePrecisionLocationReceiver extends BroadcastReceiver{\n  @Override\n  public void onReceive(Context context, Intent intent) {\n    double dValue = 0;\n    float fValue = 0;\n    long lValue = 0;\n    double latitude =\n    intent.getDoubleExtra(PulseConstants.PULSE_LOCATION_LATITUDE, dValue);\n    double longitude = intent.getDoubleExtra(PulseConstants.PULSE_LOCATION_LONGITUDE, dValue);\n    float accuracy = intent.getFloatExtra(PulseConstants.PULSE_LOCATION_ACCURACY, fValue);\n    long time = intent.getLongExtra(PulseConstants.PULSE_LOCATION_TIME, lValue);\n  }\n}\n\n\n\n\n\n\nGet last known locaton\n\n\nUse getLastKnownLocation() method to request the last known location from Pulse\u2019s SDK:\n\n\nshowLastKnownLocation(mApplication.getPulseSDKInstance().getLastKnownLocation(context));\n\n\n\n\nwhere, context = this.getApplicationContext()\n\n\nprivate void showLastKnownLocation(ArrayList\nString\n mLastKnownLocation) {\n  if((null != mLastKnownLocation)\n(mLastKnownLocation.size()==4)) {\n    Toast.makeText(this, \nLast-Known-Location:\n\n    +PulseConstants.PULSE_LOCATION_LATITUDE+\n=\n+mLastKnownLocation.get(0)+\n,\n\n    +PulseConstants.PULSE_LOCATION_LONGITUDE+\n=\n+mLastKnownLocation.get(1)+\n,\n\n    +PulseConstants.PULSE_LOCATION_ACCURACY+\n=\n+mLastKnownLocation.get(2)+\n,\n\n    +PulseConstants.PULSE_LOCATION_TIME+\n=\n+mLastKnownLocation.get(3),\n    Toast.LENGTH_LONG).show();\n  }else {\n    Log.i(TAG, \nmLastKnownLocation==Null or mLastKnownLocation.size()!=4)\n);\n  }\n}\n\n\n\n\n\n\nRegular locaton update\n\n\nThe app can also receive regular location updates from Pulse in all states of operations.\nA BroadcastReceiver can be used to receive the location information asynchronously.\n\n\n\n\nAdd the following BroadcastReceiver to AndroidManifest.xml file:\n\n\n\n\n  \nreceiver\n  android:name=\ncom.pulse.sdk.broadcast.receiver.PulseLastKnownLocationReceiver\n\n  android:enabled=\ntrue\n\n  android:exported=\nfalse\n\n     \nintent-filter\n\n     \naction\n     android:name=\ncom.pulse.sdk.broadcast.last.known.location.CUSTOM_INTENT\n\n     \n/action\n\n     \n/intent-filter\n\n  \n/receiver\n\n\n\n\n\n\n\n\n\nThen add \u201ccom.pulse.sdk.broadcast.receiver\u201d package in the application project\n\n\n\n\n\n\nInside the package, create \u201cPulseLastKnownLocationReceiver\u201d class\n\n\n\n\n\n\nOnce setup, they should appear as following directory structure:\n    \n \n\n\n\n\nPlease refer to the demo app\u2019s PulseLastKnownLocationReceiver.java file to get the location information:\n\n\n\n\npublic class PulseLastKnownLocationReceiver extends BroadcastReceiver{\n  @Override\n  public void onReceive(Context context, Intent intent) {\n    double dValue = 0;\n    float fValue = 0;\n    long lValue = 0;\n    double latitude = intent.getDoubleExtra(PulseConstants.PULSE_LOCATION_LATITUDE, dValue);\n    double longitude = intent.getDoubleExtra(PulseConstants.PULSE_LOCATION_LONGITUDE, dValue);\n    float accuracy = intent.getFloatExtra(PulseConstants.PULSE_LOCATION_ACCURACY, fValue);\n    long time = intent.getLongExtra(PulseConstants.PULSE_LOCATION_TIME, lValue);\n  }\n}\n\n\n\n\n\n\nGoogle DFP\n\n\nPulse can also perform real-time geo-targeting and dynamic creative personalisation for display ads.\n\n\nThis capability currently works with Google DFP, when app is in the foreground (i.e.open)\n\n\nGoogle DFP SDK\n\n\nSetup DFP SDK as per Google\u2019s instructions and verify you can display ads without using Pulse:\n\nhttps://developers.google.com/mobile-ads-sdk/docs/dfp/android/quick-start\n\n\n\n\nEnable Pulse capability\n\n\nEnable Pulse capability on the Activities where ads are being shown:\n\n\n\n\n\n\nUse enablePulseDFP method to enable Pulse\n\n\n\n\n\n\nUse Pulse\u2019s getDFPCustomParameters method to execute showPulseDFP\n  E.g.:\n\n\n\n\n\n\n  @Override\n  protected void onResume() {\n    super.onResume();\n\n    // Enable Pulse DFP feature\n    String result = mApplication.getPulseSDKInstance().enablePulseDFP(this);\n\n    // Verify instantiation\n    if(success.equalsIgnoreCase(result)) {\n\n       @SuppressWarnings(\nstatic-access\n)\n       HashMap\nString,String\n mDFPCustomParameters = mApplication.getPulseSDKInstance().getDFPCustomParameters();\n\n       if((null != mDFPCustomParameters)\n(mDFPCustomParameters.size()==8)) {\n        showPulseDFP(mDFPCustomParameters);\n       }else {\n        showDefaultDFP();\n       }\n\n    }else { \n\n      //Pulse DFP is not available\n      showDefaultDFP();\n      }\n  } \n\n\n\n\n\n\nUse disablePulseDFP to disable Pulse ads when app is not open\n  E.g.:\n\n\n\n\n  @Override\n  protected void onPause() {\n    String result = mApplication.getPulseSDKInstance().disablePulseDFP();\n    super.onPause();\n  }\n\n\n\n\n\n\nUse addCustomTargeting in showPulseDFP to pass user\u2019s real time location needs to Google DFP\n  E.g.:\n\n\n\n\n  private void showPulseDFP(HashMap\nString, String\n mDFPCustomParameters) {\n    if(true != mPulseDFP) {\n      mPulseDFP = true;\n      if((null != mDFPCustomParameters)\n(mDFPCustomParameters.size()==8)) {\n\n        // Add customer parameters to DFP\n        Iterator\nString\n keySetIterator = mDFPCustomParameters.keySet().iterator();\n        String[] pulseDfpKey = new String[mDFPCustomParameters.size()];\n        String[] pulseDfpKeyValue = new String[mDFPCustomParameters.size()];\n\n        int index = 0;\n        while(keySetIterator.hasNext()){\n          String key = keySetIterator.next();\n          pulseDfpKey[index] = key;\n          pulseDfpKeyValue[index] = mDFPCustomParameters.get(key);\n          index++;\n        }\n\n        PublisherAdRequest newRequest = new PublisherAdRequest.Builder()\n        // Remove in Production\n        .addTestDevice(\n951599B6898217134B31EEB6E9145F9\n)\n        // Pulse DFP Targeting\n        .addCustomTargeting(pulseDfpKey[0],pulseDfpKeyValue[0])\n        .addCustomTargeting(pulseDfpKey[1],pulseDfpKeyValue[1])\n        .addCustomTargeting(pulseDfpKey[2],pulseDfpKeyValue[2])\n        .addCustomTargeting(pulseDfpKey[3],pulseDfpKeyValue[3])\n        .addCustomTargeting(pulseDfpKey[4],pulseDfpKeyValue[4])\n        .addCustomTargeting(pulseDfpKey[5],pulseDfpKeyValue[5])\n        .addCustomTargeting(pulseDfpKey[6],pulseDfpKeyValue[6])\n        .addCustomTargeting(pulseDfpKey[7],pulseDfpKeyValue[7])\n        // Media DFP Targeting\n        .addCustomTargeting(\nkeyword\n,\nmobile_banner\n)\n        .build();\n\n        mPublisherAdView.loadAd(newRequest);\n      }else {\n        Log.i(TAG,\nmDFPCustomParameters==Null , mDFPCustomParameters.size()!=8\n);\n      }\n    }else {\n      Log.i(TAG, \n mPulseDFP ==true\n);\n    }\n  }\n\n  private void showDefaultDFP() {\n    PublisherAdRequest newRequest = new PublisherAdRequest.Builder()\n    // Remove in Production\n    .addTestDevice(\n951599B6898217134B31EEB6E9145F9\n)\n    // DFP Targeting\n    .addCustomTargeting(\nkeyword\n,\nmobile_banner\n)\n    .build();\n\n    mPublisherAdView.loadAd(newRequest);\n  }", 
            "title": "Daniel Studio"
        }, 
        {
            "location": "/advanced_integration/android_studio/index.html#advanced-integration-android-studio", 
            "text": "Deep linking  Pulse provides \u201cdeep linking\u201d capability for the app to perform custom processing. The deep linked content is passed to the app when the user clicks on the notification or as a \u201csilent\u201d payload, where no notification is shown.  Please refer to the demo app to see the example of using deep linking inside the app   To use Pulse\u2019s deep link feature, add a class - PulseDeepLinkReceiver to the app and then instantiate this class from app\u2019s application class:       PulseDeepLinkReceiver mPulseDeepLinkReceiver = new PulseDeepLinkReceiver (this);   Then use intent.getStringExtra method inside the class to get deep linked content:       LocalBroadcastManager.getInstance(mApplicationContext).registerReceiver(mSilentDeepLinkReceiver,new IntentFilter(PulseConstants.PULSE_DEEP_LINK_RECEIVER));\n\n    private BroadcastReceiver mSilentDeepLinkReceiver = new BroadcastReceiver() {\n        @Override\n        public void onReceive(Context context, Intent intent) {\n            setPulseKey(intent.getStringExtra( key ));\n            Toast.makeText(mApplication,  deeplink = +intent.getStringExtra(PulseConstants.PULSE_DEEP_LINK_CONTENT),Toast.LENGTH_LONG).show();\n        }\n    };\u2028   App Uri  Pulse also provides \u201cApp Uri\u201d capability for email address, telephone and http URL payload. These can pass specific information directly to an activity when App is in the foreground.  Please refer to the demo app to see the example of receiving the information.   To use Pulse\u2019s \u201cApp Uri\u201d feature whilst app is in foreground, add a local BroadcastReceiver to the activities you want to be notified in and then use intent.getStringExtra method to get the content:    // email\nLocalBroadcastManager.getInstance(this.getApplicationContext()).registerReceiver(mAppUriEmailReceiver,new ntentFilter(PulseConstants.PULSE_APP_URI_EMAIL_RECEIVER));\n\nprivate BroadcastReceiver mAppUriEmailReceiver = new BroadcastReceiver() {\n  @Override\n  public void onReceive(Context context, Intent intent) {\n    setPulseKey(intent.getStringExtra( key ));\n    Toast.makeText(getApplicationContext(),  content =  +intent.getStringExtra(PulseConstants.PULSE_APP_URI_EMAIL_CONTENT),Toast.LENGTH_LONG).show();\n  }\n};\n\n// http\nLocalBroadcastManager.getInstance(this.getApplicationContext()).registerReceiver(mAppUriHttpReceiver,new IntentFilter(PulseConstants.PULSE_APP_URI_HTTP_RECEIVER));\n\nprivate BroadcastReceiver mAppUriHttpReceiver = new BroadcastReceiver() {\n  @Override\n  public void onReceive(Context context, Intent intent) {\n    setPulseKey(intent.getStringExtra( key ));\n    Toast.makeText(getApplicationContext(),  content =  +intent.getStringExtra(PulseConstants.PULSE_APP_URI_HTTP_CONTENT),Toast.LENGTH_LONG).show();\n  }\n};\n\n// telephone\nLocalBroadcastManager.getInstance(this.getApplicationContext()).registerReceiver(mAppUriTelReceiver,new IntentFilter(PulseConstants.PULSE_APP_URI_TEL_RECEIVER));\n\nprivate BroadcastReceiver mAppUriTelReceiver = new BroadcastReceiver() {\n  @Override\n  public void onReceive(Context context, Intent intent) {\n    setPulseKey(intent.getStringExtra( key ));\n    Toast.makeText(getApplicationContext(),  content =  +intent.getStringExtra(PulseConstants.PULSE_APP_URI_TEL_CONTENT),Toast.LENGTH_LONG).show();\n  }\n};\n\nprotected void setPulseKey(String key) {\n  mApplication.getPulseSDKInstance().setPulseAppUrlKey(key);\n}   Segments  Specific group of users can be targeted based on Segments. Use setSegments method to pass the Segment data from app for targeted engagement:   You can set up to 10 segments using setSegments method:     ArrayList String  segmentList = new ArrayList String ();\n  segmentList.add(0,  gender=female );\n  segmentList.add(1,  age=35 );\n  segmentList.add(2,  job=engineer );\n  mPulseSDK.setSegments(segmentList);   Use clearSegments to remove previously set segments:     mPulseSDK.clearSegments();   Precise and lastknown location  Pulse provides two methods for the app to get device location in the foreground (a) High precision location and (b) Last known location\nPlease refer to the demo app code to see the complete example.  Request the high prcision location  Use getHighPrecisionLocation() method to request the high precision location     mApplication.getPulseSDKInstance().getHighPrecisionLocation(context);  where, context = this.getApplicationContext()   Receive the high prcision location  A BroadcastReceiver can then be used to receive the information asynchronously.    Add the following BroadcastReceiver to AndroidManifest.xml file   receiver\nandroid:name= com.pulse.sdk.broadcast.receiver.PulsePrecisionLocationReceiver \nandroid:enabled= true \nandroid:exported= false \n   intent-filter \n   action\n  android:name= com.pulse.sdk.broadcast.high.precision.location.CUSTOM_INTENT \n   /action \n   /intent-filter  /receiver     Then add \u201ccom.pulse.sdk.broadcast.receiver\u201d package in the application project    Inside the package, create \u201cPulsePrecisionLocationReceiver\u201d class    Once setup, they should appear as following directory structure:\n           Please refer to the demo app\u2019s PulsePrecisionLocationReceiver.java file to get the location information:    public class PulsePrecisionLocationReceiver extends BroadcastReceiver{\n  @Override\n  public void onReceive(Context context, Intent intent) {\n    double dValue = 0;\n    float fValue = 0;\n    long lValue = 0;\n    double latitude =\n    intent.getDoubleExtra(PulseConstants.PULSE_LOCATION_LATITUDE, dValue);\n    double longitude = intent.getDoubleExtra(PulseConstants.PULSE_LOCATION_LONGITUDE, dValue);\n    float accuracy = intent.getFloatExtra(PulseConstants.PULSE_LOCATION_ACCURACY, fValue);\n    long time = intent.getLongExtra(PulseConstants.PULSE_LOCATION_TIME, lValue);\n  }\n}   Get last known locaton  Use getLastKnownLocation() method to request the last known location from Pulse\u2019s SDK:  showLastKnownLocation(mApplication.getPulseSDKInstance().getLastKnownLocation(context));  where, context = this.getApplicationContext()  private void showLastKnownLocation(ArrayList String  mLastKnownLocation) {\n  if((null != mLastKnownLocation) (mLastKnownLocation.size()==4)) {\n    Toast.makeText(this,  Last-Known-Location: \n    +PulseConstants.PULSE_LOCATION_LATITUDE+ = +mLastKnownLocation.get(0)+ , \n    +PulseConstants.PULSE_LOCATION_LONGITUDE+ = +mLastKnownLocation.get(1)+ , \n    +PulseConstants.PULSE_LOCATION_ACCURACY+ = +mLastKnownLocation.get(2)+ , \n    +PulseConstants.PULSE_LOCATION_TIME+ = +mLastKnownLocation.get(3),\n    Toast.LENGTH_LONG).show();\n  }else {\n    Log.i(TAG,  mLastKnownLocation==Null or mLastKnownLocation.size()!=4) );\n  }\n}   Regular locaton update  The app can also receive regular location updates from Pulse in all states of operations.\nA BroadcastReceiver can be used to receive the location information asynchronously.   Add the following BroadcastReceiver to AndroidManifest.xml file:      receiver\n  android:name= com.pulse.sdk.broadcast.receiver.PulseLastKnownLocationReceiver \n  android:enabled= true \n  android:exported= false \n      intent-filter \n      action\n     android:name= com.pulse.sdk.broadcast.last.known.location.CUSTOM_INTENT \n      /action \n      /intent-filter \n   /receiver     Then add \u201ccom.pulse.sdk.broadcast.receiver\u201d package in the application project    Inside the package, create \u201cPulseLastKnownLocationReceiver\u201d class    Once setup, they should appear as following directory structure:\n         Please refer to the demo app\u2019s PulseLastKnownLocationReceiver.java file to get the location information:   public class PulseLastKnownLocationReceiver extends BroadcastReceiver{\n  @Override\n  public void onReceive(Context context, Intent intent) {\n    double dValue = 0;\n    float fValue = 0;\n    long lValue = 0;\n    double latitude = intent.getDoubleExtra(PulseConstants.PULSE_LOCATION_LATITUDE, dValue);\n    double longitude = intent.getDoubleExtra(PulseConstants.PULSE_LOCATION_LONGITUDE, dValue);\n    float accuracy = intent.getFloatExtra(PulseConstants.PULSE_LOCATION_ACCURACY, fValue);\n    long time = intent.getLongExtra(PulseConstants.PULSE_LOCATION_TIME, lValue);\n  }\n}   Google DFP  Pulse can also perform real-time geo-targeting and dynamic creative personalisation for display ads.  This capability currently works with Google DFP, when app is in the foreground (i.e.open)  Google DFP SDK  Setup DFP SDK as per Google\u2019s instructions and verify you can display ads without using Pulse: https://developers.google.com/mobile-ads-sdk/docs/dfp/android/quick-start   Enable Pulse capability  Enable Pulse capability on the Activities where ads are being shown:    Use enablePulseDFP method to enable Pulse    Use Pulse\u2019s getDFPCustomParameters method to execute showPulseDFP\n  E.g.:      @Override\n  protected void onResume() {\n    super.onResume();\n\n    // Enable Pulse DFP feature\n    String result = mApplication.getPulseSDKInstance().enablePulseDFP(this);\n\n    // Verify instantiation\n    if(success.equalsIgnoreCase(result)) {\n\n       @SuppressWarnings( static-access )\n       HashMap String,String  mDFPCustomParameters = mApplication.getPulseSDKInstance().getDFPCustomParameters();\n\n       if((null != mDFPCustomParameters) (mDFPCustomParameters.size()==8)) {\n        showPulseDFP(mDFPCustomParameters);\n       }else {\n        showDefaultDFP();\n       }\n\n    }else { \n\n      //Pulse DFP is not available\n      showDefaultDFP();\n      }\n  }    Use disablePulseDFP to disable Pulse ads when app is not open\n  E.g.:     @Override\n  protected void onPause() {\n    String result = mApplication.getPulseSDKInstance().disablePulseDFP();\n    super.onPause();\n  }   Use addCustomTargeting in showPulseDFP to pass user\u2019s real time location needs to Google DFP\n  E.g.:     private void showPulseDFP(HashMap String, String  mDFPCustomParameters) {\n    if(true != mPulseDFP) {\n      mPulseDFP = true;\n      if((null != mDFPCustomParameters) (mDFPCustomParameters.size()==8)) {\n\n        // Add customer parameters to DFP\n        Iterator String  keySetIterator = mDFPCustomParameters.keySet().iterator();\n        String[] pulseDfpKey = new String[mDFPCustomParameters.size()];\n        String[] pulseDfpKeyValue = new String[mDFPCustomParameters.size()];\n\n        int index = 0;\n        while(keySetIterator.hasNext()){\n          String key = keySetIterator.next();\n          pulseDfpKey[index] = key;\n          pulseDfpKeyValue[index] = mDFPCustomParameters.get(key);\n          index++;\n        }\n\n        PublisherAdRequest newRequest = new PublisherAdRequest.Builder()\n        // Remove in Production\n        .addTestDevice( 951599B6898217134B31EEB6E9145F9 )\n        // Pulse DFP Targeting\n        .addCustomTargeting(pulseDfpKey[0],pulseDfpKeyValue[0])\n        .addCustomTargeting(pulseDfpKey[1],pulseDfpKeyValue[1])\n        .addCustomTargeting(pulseDfpKey[2],pulseDfpKeyValue[2])\n        .addCustomTargeting(pulseDfpKey[3],pulseDfpKeyValue[3])\n        .addCustomTargeting(pulseDfpKey[4],pulseDfpKeyValue[4])\n        .addCustomTargeting(pulseDfpKey[5],pulseDfpKeyValue[5])\n        .addCustomTargeting(pulseDfpKey[6],pulseDfpKeyValue[6])\n        .addCustomTargeting(pulseDfpKey[7],pulseDfpKeyValue[7])\n        // Media DFP Targeting\n        .addCustomTargeting( keyword , mobile_banner )\n        .build();\n\n        mPublisherAdView.loadAd(newRequest);\n      }else {\n        Log.i(TAG, mDFPCustomParameters==Null , mDFPCustomParameters.size()!=8 );\n      }\n    }else {\n      Log.i(TAG,   mPulseDFP ==true );\n    }\n  }\n\n  private void showDefaultDFP() {\n    PublisherAdRequest newRequest = new PublisherAdRequest.Builder()\n    // Remove in Production\n    .addTestDevice( 951599B6898217134B31EEB6E9145F9 )\n    // DFP Targeting\n    .addCustomTargeting( keyword , mobile_banner )\n    .build();\n\n    mPublisherAdView.loadAd(newRequest);\n  }", 
            "title": "Advanced Integration - Android Studio"
        }
    ]
}